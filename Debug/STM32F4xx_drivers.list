
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a78  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c20  08000c28  00010c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c20  08000c20  00010c28  2**0
                  CONTENTS
  4 .ARM          00000000  08000c20  08000c20  00010c28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c20  08000c28  00010c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c28  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c28  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010c28  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e9e  00000000  00000000  00010c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000575  00000000  00000000  00012af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00013068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  000131b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002619  00000000  00000000  000132d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001854  00000000  00000000  000158e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000094c7  00000000  00000000  0001713d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00020604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000048c  00000000  00000000  00020658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c08 	.word	0x08000c08

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000c08 	.word	0x08000c08

080001e8 <main>:
		return NACK;
	}
	return NACK; // If we got garbage, return NACK
 }

int main(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b0c8      	sub	sp, #288	; 0x120
 80001ec:	af00      	add	r7, sp, #0
	 * 4. SPI_Send(the SPI handle, pointer to the string, Len"
	 */

	SPI_Handle_t SPI2_handle;

	SPI2_GPIO_Config(); // This function does GPIO CLK EN as well
 80001ee:	f000 f89b 	bl	8000328 <SPI2_GPIO_Config>

	SPI2_CLK_EN();
 80001f2:	4b4b      	ldr	r3, [pc, #300]	; (8000320 <main+0x138>)
 80001f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001f6:	4a4a      	ldr	r2, [pc, #296]	; (8000320 <main+0x138>)
 80001f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001fc:	6413      	str	r3, [r2, #64]	; 0x40

	SPI2_handle.pSPIx = SPI2_HW;
 80001fe:	4b49      	ldr	r3, [pc, #292]	; (8000324 <main+0x13c>)
 8000200:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	SPI2_handle.SPI_DeviceConfig.SPI_MstrSlvSel = SPI_MODE_MASTER;
 8000204:	2300      	movs	r3, #0
 8000206:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	SPI2_handle.SPI_DeviceConfig.SPI_BusConfig = SPI_BUS_DUPLEX_FULL;
 800020a:	2303      	movs	r3, #3
 800020c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	SPI2_handle.SPI_DeviceConfig.SPI_CPOL = SPI_CPOL_NORMAL_ACTH;
 8000210:	2300      	movs	r3, #0
 8000212:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
	SPI2_handle.SPI_DeviceConfig.SPI_CPHA = SPI_CPHA_1ST_EDGE;
 8000216:	2301      	movs	r3, #1
 8000218:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	SPI2_handle.SPI_DeviceConfig.SPI_ClkSpeed = SPI_PCLK_SPD_DIV16;
 800021c:	2303      	movs	r3, #3
 800021e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	SPI2_handle.SPI_DeviceConfig.SPI_DFF = SPI_DFF_8BIT;
 8000222:	2308      	movs	r3, #8
 8000224:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
	SPI2_handle.SPI_DeviceConfig.SPI_SSM = SPI_SSM_HW;
 8000228:	2300      	movs	r3, #0
 800022a:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
	SPI2_handle.SPI_DeviceConfig.SPI_SSOE = 1;
 800022e:	2301      	movs	r3, #1
 8000230:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	SPI2_handle.SPI_DeviceConfig.SPI_FRF = SPI_FRF_MOTO; // ignored if SSM = SPI_SSM_SW = 1
 8000234:	2300      	movs	r3, #0
 8000236:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	// Doing these for initialization to defaults
	SPI2_handle.SPI_DeviceConfig.SPI_TXEIE = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	SPI2_handle.SPI_DeviceConfig.SPI_RXNEIE = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
	SPI2_handle.SPI_DeviceConfig.SPI_ERRIE = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	SPI2_handle.SPI_DeviceConfig.SPI_TXDMAEN = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	SPI2_handle.SPI_DeviceConfig.SPI_RXDMAEN = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119

	SPI_Init(&SPI2_handle);
 8000258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fb06 	bl	800086e <SPI_Init>

	uint8_t RxBuffer[256], LEDValue = 99;
 8000262:	2363      	movs	r3, #99	; 0x63
 8000264:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f


	while (1) {
		PushUserButton_Continue();
 8000268:	f000 f892 	bl	8000390 <PushUserButton_Continue>
		delay();
 800026c:	f000 f8bc 	bl	80003e8 <delay>
		SPI_Control(SPI2_handle.pSPIx, enable);
 8000270:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000274:	2101      	movs	r1, #1
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fc06 	bl	8000a88 <SPI_Control>

		/*
		 * Manual, step by step code
		 */
		uint8_t cmd, dummyRead = 0xff, dummyWrite = 0xff;
 800027c:	1dbb      	adds	r3, r7, #6
 800027e:	22ff      	movs	r2, #255	; 0xff
 8000280:	701a      	strb	r2, [r3, #0]
 8000282:	1d7b      	adds	r3, r7, #5
 8000284:	22ff      	movs	r2, #255	; 0xff
 8000286:	701a      	strb	r2, [r3, #0]
		uint8_t ackORnack, args[2], LEDValue, SensorValue;
/**/
		cmd = COMMAND_LED_CTRL; //======================================================
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	2250      	movs	r2, #80	; 0x50
 800028c:	701a      	strb	r2, [r3, #0]
		args[0] = 9; // Pin #
 800028e:	463b      	mov	r3, r7
 8000290:	2209      	movs	r2, #9
 8000292:	701a      	strb	r2, [r3, #0]
		args[1] = 1; // On
 8000294:	463b      	mov	r3, r7
 8000296:	2201      	movs	r2, #1
 8000298:	705a      	strb	r2, [r3, #1]
		SPI_Send(SPI2_handle.pSPIx, &cmd, 1);					// 1. >> Send Command
 800029a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800029e:	1df9      	adds	r1, r7, #7
 80002a0:	2201      	movs	r2, #1
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fc1e 	bl	8000ae4 <SPI_Send>
		SPI_Receive(SPI2_handle.pSPIx, &dummyRead, 1);			// 2. << Receive dummy
 80002a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80002ac:	1db9      	adds	r1, r7, #6
 80002ae:	2201      	movs	r2, #1
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fc4e 	bl	8000b52 <SPI_Receive>
		small_delay();
 80002b6:	f000 f8ad 	bl	8000414 <small_delay>
		SPI_Send(SPI2_handle.pSPIx, &dummyWrite, 1);			// 3. >> Send dummy
 80002ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80002be:	1d79      	adds	r1, r7, #5
 80002c0:	2201      	movs	r2, #1
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fc0e 	bl	8000ae4 <SPI_Send>
		SPI_Receive(SPI2_handle.pSPIx, &ackORnack, 1);			// 4. << Receive Ack/Nack
 80002c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80002cc:	1d39      	adds	r1, r7, #4
 80002ce:	2201      	movs	r2, #1
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fc3e 	bl	8000b52 <SPI_Receive>
		if (ackORnack == ACK) {
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2bf5      	cmp	r3, #245	; 0xf5
 80002dc:	d10d      	bne.n	80002fa <main+0x112>
			SPI_Send(SPI2_handle.pSPIx, args, 2);				// 5. >> Send 1st and 2nd arg bytes
 80002de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80002e2:	4639      	mov	r1, r7
 80002e4:	2202      	movs	r2, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 fbfc 	bl	8000ae4 <SPI_Send>
			SPI_Receive(SPI2_handle.pSPIx, &dummyRead, 1);
 80002ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80002f0:	1db9      	adds	r1, r7, #6
 80002f2:	2201      	movs	r2, #1
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fc2c 	bl	8000b52 <SPI_Receive>
		uint8_t *pRxBuffer;
		pRxBuffer = malloc(*lenBuffer);
		SPI_Receive(SPI2_handle.pSPIx, pRxBuffer, *lenBuffer);
*/
		// While SPI2 is busy, loop, else disable SPI2
		while (SPI_GetFlagStatus(SPI2_handle.pSPIx, SPI_SR_BSY_FLG)) {}
 80002fa:	bf00      	nop
 80002fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fbdb 	bl	8000abe <SPI_GetFlagStatus>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1f6      	bne.n	80002fc <main+0x114>

		SPI_Control(SPI2_handle.pSPIx, disable);
 800030e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fbb7 	bl	8000a88 <SPI_Control>
		while (0);
 800031a:	bf00      	nop
	while (1) {
 800031c:	e7a4      	b.n	8000268 <main+0x80>
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40003800 	.word	0x40003800

08000328 <SPI2_GPIO_Config>:

	}

	return 0;
}
void SPI2_GPIO_Config(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOB_SPI_handle;

	GPIOB_CLK_EN();
 800032e:	4b16      	ldr	r3, [pc, #88]	; (8000388 <SPI2_GPIO_Config+0x60>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a15      	ldr	r2, [pc, #84]	; (8000388 <SPI2_GPIO_Config+0x60>)
 8000334:	f043 0302 	orr.w	r3, r3, #2
 8000338:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB_SPI_handle.pGPIOx = GPIOB_HW;
 800033a:	4b14      	ldr	r3, [pc, #80]	; (800038c <SPI2_GPIO_Config+0x64>)
 800033c:	607b      	str	r3, [r7, #4]

	//All the SPI2 pins will be setup for Alt Func, I/O, same config, then
	//we set the pin number and initialize 1 pin at a time. The same registers
	//are programmed multiple times, but with different bit fields each time.
	GPIOB_SPI_handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800033e:	2302      	movs	r3, #2
 8000340:	727b      	strb	r3, [r7, #9]
	GPIOB_SPI_handle.GPIO_PinConfig.GPIO_PinAltFuncMode = 5;
 8000342:	2305      	movs	r3, #5
 8000344:	737b      	strb	r3, [r7, #13]
	GPIOB_SPI_handle.GPIO_PinConfig.GPIO_PinPinPuPdCtrl = GPIO_PUPD_NONE;
 8000346:	2300      	movs	r3, #0
 8000348:	72fb      	strb	r3, [r7, #11]
	GPIOB_SPI_handle.GPIO_PinConfig.GPIO_PinOutType = GPIO_OUT_PSH_PULL;
 800034a:	2300      	movs	r3, #0
 800034c:	733b      	strb	r3, [r7, #12]
	// SPI2 SCK
	GPIOB_SPI_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 800034e:	230d      	movs	r3, #13
 8000350:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_SPI_handle);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f899 	bl	800048c <GPIO_Init>
	// SPI2 MISO
	GPIOB_SPI_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800035a:	230e      	movs	r3, #14
 800035c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_SPI_handle);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f893 	bl	800048c <GPIO_Init>
	// SPI2 MOSI
	GPIOB_SPI_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000366:	230f      	movs	r3, #15
 8000368:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_SPI_handle);
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f000 f88d 	bl	800048c <GPIO_Init>
	// SPI2 NSS
	GPIOB_SPI_handle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000372:	230c      	movs	r3, #12
 8000374:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIOB_SPI_handle);
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f887 	bl	800048c <GPIO_Init>

}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40023800 	.word	0x40023800
 800038c:	40020400 	.word	0x40020400

08000390 <PushUserButton_Continue>:
int PushUserButton_Continue(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0

	// With Vdd on the button, open collector will turn the light on when the driver is activated.
	// With push-pull, when the driver is on, the LED will be off.

	GPIO_Handle_t GPIOA_handle;
	GPIOA_handle.pGPIOx = GPIOA_HW;
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <PushUserButton_Continue+0x50>)
 8000398:	607b      	str	r3, [r7, #4]

	GPIOA_CLK_EN();
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <PushUserButton_Continue+0x54>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <PushUserButton_Continue+0x54>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA_handle.GPIO_PinConfig.GPIO_PinNumber = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	723b      	strb	r3, [r7, #8]
	GPIOA_handle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80003aa:	2300      	movs	r3, #0
 80003ac:	727b      	strb	r3, [r7, #9]
	GPIOA_handle.GPIO_PinConfig.GPIO_PinPinPuPdCtrl = GPIO_PUPD_NONE; // since ext pull-down
 80003ae:	2300      	movs	r3, #0
 80003b0:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOA_handle);
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f869 	bl	800048c <GPIO_Init>

	while(1) {
		// Look for the button push, return when we see it.
		if (GPIO_ReadInputPin(GPIOA_handle.pGPIOx, 0)== 1) {
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 fa40 	bl	8000844 <GPIO_ReadInputPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d1f7      	bne.n	80003ba <PushUserButton_Continue+0x2a>
			GPIOA_CLK_DIS();
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <PushUserButton_Continue+0x54>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <PushUserButton_Continue+0x54>)
 80003d0:	f023 0301 	bic.w	r3, r3, #1
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30

			return 0;
 80003d6:	2300      	movs	r3, #0
		}
	}

	return 1; //We shouldn't get here
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40020000 	.word	0x40020000
 80003e4:	40023800 	.word	0x40023800

080003e8 <delay>:
void delay(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80003ee:	2300      	movs	r3, #0
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	e002      	b.n	80003fa <delay+0x12>
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3301      	adds	r3, #1
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <delay+0x28>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d9f8      	bls.n	80003f4 <delay+0xc>
}
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	0007a11f 	.word	0x0007a11f

08000414 <small_delay>:
void small_delay(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 100 ; i ++);
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
 800041e:	e002      	b.n	8000426 <small_delay+0x12>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3301      	adds	r3, #1
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2b63      	cmp	r3, #99	; 0x63
 800042a:	d9f9      	bls.n	8000420 <small_delay+0xc>
}
 800042c:	bf00      	nop
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800043c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <LoopForever+0x6>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	; (8000478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <LoopForever+0xe>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	; (8000480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	; (8000484 <LoopForever+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000466:	f000 fbab 	bl	8000bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff febd 	bl	80001e8 <main>

0800046e <LoopForever>:

LoopForever:
    b LoopForever
 800046e:	e7fe      	b.n	800046e <LoopForever>
  ldr   r0, =_estack
 8000470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800047c:	08000c28 	.word	0x08000c28
  ldr r2, =_sbss
 8000480:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000484:	2000001c 	.word	0x2000001c

08000488 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC_IRQHandler>
	...

0800048c <GPIO_Init>:
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uint8_t	mode, pin;

	mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	73fb      	strb	r3, [r7, #15]
	pin = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	73bb      	strb	r3, [r7, #14]

	// Given a GPIO pin #:
	// 1. Configure the Mode
	if (mode <= GPIO_MODE_ANALOG) {
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	2b03      	cmp	r3, #3
 80004a4:	d81b      	bhi.n	80004de <GPIO_Init+0x52>
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pin*2); // clear the bits so the bitwise OR properly sets
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	2103      	movs	r1, #3
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	43db      	mvns	r3, r3
 80004b8:	4619      	mov	r1, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	400a      	ands	r2, r1
 80004c0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (mode << pin*2);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	7bf9      	ldrb	r1, [r7, #15]
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	4619      	mov	r1, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	430a      	orrs	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	e110      	b.n	8000700 <GPIO_Init+0x274>
	} else {
		// This is for interrupts.
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_FEDGE ) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	795b      	ldrb	r3, [r3, #5]
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	d125      	bne.n	8000532 <GPIO_Init+0xa6>
			//1. configure the FTSR
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pin*2); // Sets to input mode (0)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	7bbb      	ldrb	r3, [r7, #14]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2103      	movs	r1, #3
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	4619      	mov	r1, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	400a      	ands	r2, r1
 8000500:	601a      	str	r2, [r3, #0]
			EXTI_HW->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000502:	4b5d      	ldr	r3, [pc, #372]	; (8000678 <GPIO_Init+0x1ec>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	7912      	ldrb	r2, [r2, #4]
 800050a:	4611      	mov	r1, r2
 800050c:	2201      	movs	r2, #1
 800050e:	408a      	lsls	r2, r1
 8000510:	4611      	mov	r1, r2
 8000512:	4a59      	ldr	r2, [pc, #356]	; (8000678 <GPIO_Init+0x1ec>)
 8000514:	430b      	orrs	r3, r1
 8000516:	60d3      	str	r3, [r2, #12]
			EXTI_HW->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000518:	4b57      	ldr	r3, [pc, #348]	; (8000678 <GPIO_Init+0x1ec>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7912      	ldrb	r2, [r2, #4]
 8000520:	4611      	mov	r1, r2
 8000522:	2201      	movs	r2, #1
 8000524:	408a      	lsls	r2, r1
 8000526:	43d2      	mvns	r2, r2
 8000528:	4611      	mov	r1, r2
 800052a:	4a53      	ldr	r2, [pc, #332]	; (8000678 <GPIO_Init+0x1ec>)
 800052c:	400b      	ands	r3, r1
 800052e:	6093      	str	r3, [r2, #8]
 8000530:	e051      	b.n	80005d6 <GPIO_Init+0x14a>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_REDGE ) {
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	795b      	ldrb	r3, [r3, #5]
 8000536:	2b05      	cmp	r3, #5
 8000538:	d125      	bne.n	8000586 <GPIO_Init+0xfa>
			//1. configure the RTSR
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pin*2);  // Sets to input mode (0)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	2103      	movs	r1, #3
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	43db      	mvns	r3, r3
 800054c:	4619      	mov	r1, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	400a      	ands	r2, r1
 8000554:	601a      	str	r2, [r3, #0]
			EXTI_HW->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000556:	4b48      	ldr	r3, [pc, #288]	; (8000678 <GPIO_Init+0x1ec>)
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	7912      	ldrb	r2, [r2, #4]
 800055e:	4611      	mov	r1, r2
 8000560:	2201      	movs	r2, #1
 8000562:	408a      	lsls	r2, r1
 8000564:	4611      	mov	r1, r2
 8000566:	4a44      	ldr	r2, [pc, #272]	; (8000678 <GPIO_Init+0x1ec>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6093      	str	r3, [r2, #8]
			EXTI_HW->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056c:	4b42      	ldr	r3, [pc, #264]	; (8000678 <GPIO_Init+0x1ec>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	7912      	ldrb	r2, [r2, #4]
 8000574:	4611      	mov	r1, r2
 8000576:	2201      	movs	r2, #1
 8000578:	408a      	lsls	r2, r1
 800057a:	43d2      	mvns	r2, r2
 800057c:	4611      	mov	r1, r2
 800057e:	4a3e      	ldr	r2, [pc, #248]	; (8000678 <GPIO_Init+0x1ec>)
 8000580:	400b      	ands	r3, r1
 8000582:	60d3      	str	r3, [r2, #12]
 8000584:	e027      	b.n	80005d6 <GPIO_Init+0x14a>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_RFEDGE ) {
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	795b      	ldrb	r3, [r3, #5]
 800058a:	2b06      	cmp	r3, #6
 800058c:	d123      	bne.n	80005d6 <GPIO_Init+0x14a>
			//1. configure the FTSR and RTSR
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pin*2);  // Sets to input mode (0)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	7bbb      	ldrb	r3, [r7, #14]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2103      	movs	r1, #3
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	43db      	mvns	r3, r3
 80005a0:	4619      	mov	r1, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	400a      	ands	r2, r1
 80005a8:	601a      	str	r2, [r3, #0]
			EXTI_HW->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005aa:	4b33      	ldr	r3, [pc, #204]	; (8000678 <GPIO_Init+0x1ec>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <GPIO_Init+0x1ec>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
			EXTI_HW->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <GPIO_Init+0x1ec>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a29      	ldr	r2, [pc, #164]	; (8000678 <GPIO_Init+0x1ec>)
 80005d2:	430b      	orrs	r3, r1
 80005d4:	6093      	str	r3, [r2, #8]
			 * a. Pick with EXTICR# (1-4) based on which EXTI# which depends on
			 *    the PinNumber
			 * b. The 4 bits will be selected also based on EXTI#/PinNumber
			 * c. The value of the 4 bits depends on the port
			 */
		SYSCFG_CLK_EN();
 80005d6:	4b29      	ldr	r3, [pc, #164]	; (800067c <GPIO_Init+0x1f0>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005da:	4a28      	ldr	r2, [pc, #160]	; (800067c <GPIO_Init+0x1f0>)
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e0:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t extiNum, bitShift, value;

		extiNum = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	089b      	lsrs	r3, r3, #2
 80005e8:	737b      	strb	r3, [r7, #13]
		bitShift = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	f003 0303 	and.w	r3, r3, #3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	733b      	strb	r3, [r7, #12]
		value = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a20      	ldr	r2, [pc, #128]	; (8000680 <GPIO_Init+0x1f4>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d050      	beq.n	80006a4 <GPIO_Init+0x218>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <GPIO_Init+0x1f8>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d032      	beq.n	8000672 <GPIO_Init+0x1e6>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <GPIO_Init+0x1fc>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d02b      	beq.n	800066e <GPIO_Init+0x1e2>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a1c      	ldr	r2, [pc, #112]	; (800068c <GPIO_Init+0x200>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d024      	beq.n	800066a <GPIO_Init+0x1de>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1a      	ldr	r2, [pc, #104]	; (8000690 <GPIO_Init+0x204>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d01d      	beq.n	8000666 <GPIO_Init+0x1da>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a19      	ldr	r2, [pc, #100]	; (8000694 <GPIO_Init+0x208>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d016      	beq.n	8000662 <GPIO_Init+0x1d6>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a17      	ldr	r2, [pc, #92]	; (8000698 <GPIO_Init+0x20c>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d00f      	beq.n	800065e <GPIO_Init+0x1d2>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a16      	ldr	r2, [pc, #88]	; (800069c <GPIO_Init+0x210>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d008      	beq.n	800065a <GPIO_Init+0x1ce>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <GPIO_Init+0x214>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d101      	bne.n	8000656 <GPIO_Init+0x1ca>
 8000652:	2308      	movs	r3, #8
 8000654:	e027      	b.n	80006a6 <GPIO_Init+0x21a>
 8000656:	2300      	movs	r3, #0
 8000658:	e025      	b.n	80006a6 <GPIO_Init+0x21a>
 800065a:	2307      	movs	r3, #7
 800065c:	e023      	b.n	80006a6 <GPIO_Init+0x21a>
 800065e:	2306      	movs	r3, #6
 8000660:	e021      	b.n	80006a6 <GPIO_Init+0x21a>
 8000662:	2305      	movs	r3, #5
 8000664:	e01f      	b.n	80006a6 <GPIO_Init+0x21a>
 8000666:	2304      	movs	r3, #4
 8000668:	e01d      	b.n	80006a6 <GPIO_Init+0x21a>
 800066a:	2303      	movs	r3, #3
 800066c:	e01b      	b.n	80006a6 <GPIO_Init+0x21a>
 800066e:	2302      	movs	r3, #2
 8000670:	e019      	b.n	80006a6 <GPIO_Init+0x21a>
 8000672:	2301      	movs	r3, #1
 8000674:	e017      	b.n	80006a6 <GPIO_Init+0x21a>
 8000676:	bf00      	nop
 8000678:	40013c00 	.word	0x40013c00
 800067c:	40023800 	.word	0x40023800
 8000680:	40020000 	.word	0x40020000
 8000684:	40020400 	.word	0x40020400
 8000688:	40020800 	.word	0x40020800
 800068c:	40020c00 	.word	0x40020c00
 8000690:	40021000 	.word	0x40021000
 8000694:	40021400 	.word	0x40021400
 8000698:	40021800 	.word	0x40021800
 800069c:	40021c00 	.word	0x40021c00
 80006a0:	40022000 	.word	0x40022000
 80006a4:	2300      	movs	r3, #0
 80006a6:	72fb      	strb	r3, [r7, #11]
		SYSCFG_HW->EXTICR[extiNum] &= ~(0xf << bitShift); //clear bits
 80006a8:	4a64      	ldr	r2, [pc, #400]	; (800083c <GPIO_Init+0x3b0>)
 80006aa:	7b7b      	ldrb	r3, [r7, #13]
 80006ac:	3302      	adds	r3, #2
 80006ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006b2:	7b3b      	ldrb	r3, [r7, #12]
 80006b4:	210f      	movs	r1, #15
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	43db      	mvns	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	495f      	ldr	r1, [pc, #380]	; (800083c <GPIO_Init+0x3b0>)
 80006c0:	7b7b      	ldrb	r3, [r7, #13]
 80006c2:	4002      	ands	r2, r0
 80006c4:	3302      	adds	r3, #2
 80006c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG_HW->EXTICR[extiNum] |= (value << bitShift); //set bits
 80006ca:	4a5c      	ldr	r2, [pc, #368]	; (800083c <GPIO_Init+0x3b0>)
 80006cc:	7b7b      	ldrb	r3, [r7, #13]
 80006ce:	3302      	adds	r3, #2
 80006d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d4:	7af9      	ldrb	r1, [r7, #11]
 80006d6:	7b3b      	ldrb	r3, [r7, #12]
 80006d8:	fa01 f303 	lsl.w	r3, r1, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	4957      	ldr	r1, [pc, #348]	; (800083c <GPIO_Init+0x3b0>)
 80006e0:	7b7b      	ldrb	r3, [r7, #13]
 80006e2:	4302      	orrs	r2, r0
 80006e4:	3302      	adds	r3, #2
 80006e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable EXTI interrupt delivery using the IMR
		EXTI_HW->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ea:	4b55      	ldr	r3, [pc, #340]	; (8000840 <GPIO_Init+0x3b4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	7912      	ldrb	r2, [r2, #4]
 80006f2:	4611      	mov	r1, r2
 80006f4:	2201      	movs	r2, #1
 80006f6:	408a      	lsls	r2, r1
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a51      	ldr	r2, [pc, #324]	; (8000840 <GPIO_Init+0x3b4>)
 80006fc:	430b      	orrs	r3, r1
 80006fe:	6013      	str	r3, [r2, #0]

		// 4. Enable the NVIC in the core (do this in GPIO_IRQConfig function)

	}
	// 2. Configure the speed (Only needed for Output and some Alt Func modes????)
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pin*2); // clear both bits to initialize
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	2103      	movs	r1, #3
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	43db      	mvns	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	400a      	ands	r2, r1
 800071a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << pin*2);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	689a      	ldr	r2, [r3, #8]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	799b      	ldrb	r3, [r3, #6]
 8000726:	4619      	mov	r1, r3
 8000728:	7bbb      	ldrb	r3, [r7, #14]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	fa01 f303 	lsl.w	r3, r1, r3
 8000730:	4619      	mov	r1, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	430a      	orrs	r2, r1
 8000738:	609a      	str	r2, [r3, #8]

	// 3. Configure Pull-up/Pull-down
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pin*2); // clear both bits to initialize
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68da      	ldr	r2, [r3, #12]
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	2103      	movs	r1, #3
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	400a      	ands	r2, r1
 8000754:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPinPuPdCtrl << pin*2);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	79db      	ldrb	r3, [r3, #7]
 8000760:	4619      	mov	r1, r3
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	4619      	mov	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	430a      	orrs	r2, r1
 8000772:	60da      	str	r2, [r3, #12]

	// 4. Configure Pin Output Type
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pin); // clear the bit to initialize
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	7bbb      	ldrb	r3, [r7, #14]
 800077c:	2101      	movs	r1, #1
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43db      	mvns	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	400a      	ands	r2, r1
 800078c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOutType << pin);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7a1b      	ldrb	r3, [r3, #8]
 8000798:	4619      	mov	r1, r3
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	fa01 f303 	lsl.w	r3, r1, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	605a      	str	r2, [r3, #4]

	// 5. Configure Alternate Function, if needed
	if (mode == GPIO_MODE_ALTFN) {
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d13f      	bne.n	8000830 <GPIO_Init+0x3a4>
		//Configure the alt function registers
		if (pin < 8) {
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	2b07      	cmp	r3, #7
 80007b4:	d81d      	bhi.n	80007f2 <GPIO_Init+0x366>
			pGPIOHandle->pGPIOx->AFRL &= ~(0xf << pin*4); // 1st, clear the bits, 2nd, set the bits
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	6a1a      	ldr	r2, [r3, #32]
 80007bc:	7bbb      	ldrb	r3, [r7, #14]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	210f      	movs	r1, #15
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	400a      	ands	r2, r1
 80007d0:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << pin*4);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6a1a      	ldr	r2, [r3, #32]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7a5b      	ldrb	r3, [r3, #9]
 80007dc:	4619      	mov	r1, r3
 80007de:	7bbb      	ldrb	r3, [r7, #14]
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	4619      	mov	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	430a      	orrs	r2, r1
 80007ee:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (pin-8)*4);
		}

	}

}
 80007f0:	e01e      	b.n	8000830 <GPIO_Init+0x3a4>
			pGPIOHandle->pGPIOx->AFRH &= ~(0xf << (pin-8)*4); // Same, but have to offset for upper 8 pins
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	3b08      	subs	r3, #8
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	210f      	movs	r1, #15
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	400a      	ands	r2, r1
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (pin-8)*4);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7a5b      	ldrb	r3, [r3, #9]
 800081a:	4619      	mov	r1, r3
 800081c:	7bbb      	ldrb	r3, [r7, #14]
 800081e:	3b08      	subs	r3, #8
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	4619      	mov	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	430a      	orrs	r2, r1
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40013800 	.word	0x40013800
 8000840:	40013c00 	.word	0x40013c00

08000844 <GPIO_ReadInputPin>:
 *
 * @Note              -  none
 */

uint8_t  GPIO_ReadInputPin(GPIO_Reg_t *pGPIOx, uint8_t PinNumber)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	691a      	ldr	r2, [r3, #16]
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	fa22 f303 	lsr.w	r3, r2, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]
	return value;
 8000862:	7bfb      	ldrb	r3, [r7, #15]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <SPI_Init>:
 * @return            -  none
 *
 * @Note              -  Things we're not setting: LSBFIRST, CRC (any CRC control)
 */

void SPI_Init(SPI_Handle_t *pSPIHandle) {
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	// Master or Slave  -------------------------------------------------
	if (pSPIHandle->SPI_DeviceConfig.SPI_MstrSlvSel == SPI_MODE_MASTER) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d108      	bne.n	8000890 <SPI_Init+0x22>
		pSPIHandle->pSPIx->CR1 |= (0x1 << SPI_CR1_MSTR); // Set the MSTR bit
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 0204 	orr.w	r2, r2, #4
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	e007      	b.n	80008a0 <SPI_Init+0x32>
	} else {
		// Setup for slave
		pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_MSTR); // Clear the MSTR bit
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f022 0204 	bic.w	r2, r2, #4
 800089e:	601a      	str	r2, [r3, #0]
	}
	// Bus configuration/Data transmission  --------------------------------
	if (pSPIHandle->SPI_DeviceConfig.SPI_BusConfig == SPI_BUS_DUPLEX_FULL) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d110      	bne.n	80008ca <SPI_Init+0x5c>
		pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_RXONLY); // Sets full duplex (RXONLY = 0)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80008b6:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_BIDIMODE); // Sets 2-line uni communication
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	e028      	b.n	800091c <SPI_Init+0xae>
	} else if (pSPIHandle->SPI_DeviceConfig.SPI_BusConfig == SPI_BUS_DUPLEX_HALF) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	795b      	ldrb	r3, [r3, #5]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d110      	bne.n	80008f4 <SPI_Init+0x86>
		pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_RXONLY); // Sets full duplex (RXONLY = 0)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80008e0:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->CR1 |=  (0x1 << SPI_CR1_BIDIMODE);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	e013      	b.n	800091c <SPI_Init+0xae>
	} else if (pSPIHandle->SPI_DeviceConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_RXONLY) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	795b      	ldrb	r3, [r3, #5]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d10f      	bne.n	800091c <SPI_Init+0xae>
		pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_BIDIMODE);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800090a:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->CR1 |=  (0x1 << SPI_CR1_RXONLY); // Output disabled (RXONLY = 1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800091a:	601a      	str	r2, [r3, #0]
	}
	// Data Frame Format  -------------------------------------------------------
	if (pSPIHandle->SPI_DeviceConfig.SPI_DFF == SPI_DFF_8BIT) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7a5b      	ldrb	r3, [r3, #9]
 8000920:	2b08      	cmp	r3, #8
 8000922:	d108      	bne.n	8000936 <SPI_Init+0xc8>
		pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_DFF); // Clear the DFF bit
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	e007      	b.n	8000946 <SPI_Init+0xd8>
	} else {
		// Setup for 16 bit
		pSPIHandle->pSPIx->CR1 |= (0x1 << SPI_CR1_DFF); // Set the DFF bit
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000944:	601a      	str	r2, [r3, #0]
	}

	// SCK Polarity   -----------------------------------------------------------
	if (pSPIHandle->SPI_DeviceConfig.SPI_CPOL == SPI_CPOL_NORMAL_ACTH) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7a1b      	ldrb	r3, [r3, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d108      	bne.n	8000960 <SPI_Init+0xf2>
		pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_CPOL); // Clear the CPOL bit
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0202 	bic.w	r2, r2, #2
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	e007      	b.n	8000970 <SPI_Init+0x102>
	} else {
		// Set CPOL inverted
		pSPIHandle->pSPIx->CR1 |= (0x1 << SPI_CR1_CPOL); // Set the CPOL bit
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0202 	orr.w	r2, r2, #2
 800096e:	601a      	str	r2, [r3, #0]
	}

	// SCK Phase (1st or 2nd edge data capture)  --------------------------------
	if (pSPIHandle->SPI_DeviceConfig.SPI_CPHA == SPI_CPHA_1ST_EDGE) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	79db      	ldrb	r3, [r3, #7]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d108      	bne.n	800098a <SPI_Init+0x11c>
		pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_CPHA); // Clear the CPHA bit
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f022 0201 	bic.w	r2, r2, #1
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e007      	b.n	800099a <SPI_Init+0x12c>
	} else {
		// Set CPHA for 2nd edge
		pSPIHandle->pSPIx->CR1 |= (0x1 << SPI_CR1_CPHA); // Set the CPHA bit
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f042 0201 	orr.w	r2, r2, #1
 8000998:	601a      	str	r2, [r3, #0]
	}

	// Slave Select Management (SW or HW)  -----SSM = 1 is SW, 0 is HW ----------
	if (pSPIHandle->SPI_DeviceConfig.SPI_SSM == SPI_SSM_SW) {
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	7a9b      	ldrb	r3, [r3, #10]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d114      	bne.n	80009cc <SPI_Init+0x15e>
		pSPIHandle->pSPIx->CR1 |= (0x1 << SPI_CR1_SSM); // Set the SSM bit
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009b0:	601a      	str	r2, [r3, #0]
		if (pSPIHandle->SPI_DeviceConfig.SPI_FRF == SPI_FRF_MOTO) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7b9b      	ldrb	r3, [r3, #14]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d110      	bne.n	80009dc <SPI_Init+0x16e>
			pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_SSI); // Clear the SSI bit
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e007      	b.n	80009dc <SPI_Init+0x16e>
		}
	} else {
		// Setup for HW management of SS
		pSPIHandle->pSPIx->CR1 &= ~(0x1 << SPI_CR1_SSM); // Clear the SSM bit
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009da:	601a      	str	r2, [r3, #0]
	}

	// Set the bus speed (clear then set) ---------------------------------------
	pSPIHandle->pSPIx->CR1 &= ~(0x7 << SPI_CR1_BR2_0); // Clear the Baud Rate bits
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80009ea:	601a      	str	r2, [r3, #0]
	// SPI_ClkSpeed should be set with the @SPI_PCLK_SPD macro, so the same bit values can
	// be used to set the BR[2:0] bits
	pSPIHandle->pSPIx->CR1 |= (pSPIHandle->SPI_DeviceConfig.SPI_ClkSpeed << SPI_CR1_BR2_0);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	799b      	ldrb	r3, [r3, #6]
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	4619      	mov	r1, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]
	// 1. Next time, set all macros based on their default and actual values rather than
	//    using values like 8 or 16 (0 or 1 would be better)
	// 2. Store all the config values into a temp register first, then do a single write to
	//    that temp register.

	uint32_t tempReg = 0x00U;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]

	if (pSPIHandle->SPI_DeviceConfig.SPI_TXEIE == SPI_TXINT_EN) {
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7adb      	ldrb	r3, [r3, #11]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d103      	bne.n	8000a16 <SPI_Init+0x1a8>
		tempReg |= (1 << SPI_CR2_TXEIE);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	60fb      	str	r3, [r7, #12]
	}
	if (pSPIHandle->SPI_DeviceConfig.SPI_RXNEIE  == SPI_RXINT_EN) {
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7b1b      	ldrb	r3, [r3, #12]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d103      	bne.n	8000a26 <SPI_Init+0x1b8>
		tempReg |= (1 << SPI_CR2_RXNEIE);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	60fb      	str	r3, [r7, #12]
	}
	if (pSPIHandle->SPI_DeviceConfig.SPI_ERRIE == SPI_ERRINT_EN) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7b5b      	ldrb	r3, [r3, #13]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d103      	bne.n	8000a36 <SPI_Init+0x1c8>
		tempReg |= (1 << SPI_CR2_EREIE);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f043 0320 	orr.w	r3, r3, #32
 8000a34:	60fb      	str	r3, [r7, #12]
	}
	if (pSPIHandle->SPI_DeviceConfig.SPI_FRF == SPI_FRF_TI) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7b9b      	ldrb	r3, [r3, #14]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d103      	bne.n	8000a46 <SPI_Init+0x1d8>
		tempReg |= (1 << SPI_CR2_FRF);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	60fb      	str	r3, [r7, #12]
	}
	if (pSPIHandle->SPI_DeviceConfig.SPI_SSOE == SPI_SSOE_EN) {
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7bdb      	ldrb	r3, [r3, #15]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d103      	bne.n	8000a56 <SPI_Init+0x1e8>
		tempReg |= (1 << SPI_CR2_SSOE);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	60fb      	str	r3, [r7, #12]
	}
	if (pSPIHandle->SPI_DeviceConfig.SPI_TXDMAEN == SPI_TXDMA_EN) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	7c1b      	ldrb	r3, [r3, #16]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d103      	bne.n	8000a66 <SPI_Init+0x1f8>
		tempReg |= (1 << SPI_CR2_TXDMAEN);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
	}
	if (pSPIHandle->SPI_DeviceConfig.SPI_RXDMAEN == SPI_TXDMA_EN) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	7c5b      	ldrb	r3, [r3, #17]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d103      	bne.n	8000a76 <SPI_Init+0x208>
		tempReg |= (1 << SPI_CR2_RXDMAEN);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
	}
	pSPIHandle->pSPIx->CR2 = tempReg;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	605a      	str	r2, [r3, #4]


}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <SPI_Control>:
 *
 * @return            -  none
 *
 * @Note              -  T
 */
void SPI_Control(SPI_Reg_t *pSPIx, EnableDisable_e EnaOrDis) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]

	if (EnaOrDis == enable) {
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d106      	bne.n	8000aa8 <SPI_Control+0x20>
		pSPIx->CR1 |= (0x1 << SPI_CR1_SPE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(0x1 << SPI_CR1_SPE);
	}
}
 8000aa6:	e005      	b.n	8000ab4 <SPI_Control+0x2c>
		pSPIx->CR1 &= ~(0x1 << SPI_CR1_SPE);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	601a      	str	r2, [r3, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <SPI_GetFlagStatus>:
		SPI2_REG_RESET();
	} else if (pSPIHandle->pSPIx == SPI3_HW) {
		SPI3_REG_RESET();
	}
}
uint8_t SPI_GetFlagStatus(SPI_Reg_t *pSPIx, uint32_t flagName){
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]

	if (pSPIx->SR & flagName) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e000      	b.n	8000ada <SPI_GetFlagStatus+0x1c>
	} else {
		return FLAG_RESET;
 8000ad8:	2300      	movs	r3, #0
	}
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SPI_Send>:
 * @return            -  none
 *
 * @Note              -  Blocking call
 */
// Why does Len need to be uint32_t? Standard practice?
void SPI_Send(SPI_Reg_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]

	while (Len > 0) {
 8000af0:	e027      	b.n	8000b42 <SPI_Send+0x5e>
		// Loop until TX buffer is empty (TXE == 1 means empty)
		while (SPI_GetFlagStatus(pSPIx, SPI_SR_TXE_FLG) == FLAG_RESET);
 8000af2:	bf00      	nop
 8000af4:	2102      	movs	r1, #2
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff ffe1 	bl	8000abe <SPI_GetFlagStatus>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f8      	beq.n	8000af4 <SPI_Send+0x10>

		// write data.
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00e      	beq.n	8000b2c <SPI_Send+0x48>
			//16 bit
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	60da      	str	r2, [r3, #12]
			Len--;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
			Len--;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	3301      	adds	r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	e00a      	b.n	8000b42 <SPI_Send+0x5e>
		} else {
			//8 bit
			pSPIx->DR = *pTxBuffer;
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	60da      	str	r2, [r3, #12]
			Len--;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
	while (Len > 0) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1d4      	bne.n	8000af2 <SPI_Send+0xe>
		}

	}
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <SPI_Receive>:



void SPI_Receive(SPI_Reg_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]

	while (Len > 0) {
 8000b5e:	e027      	b.n	8000bb0 <SPI_Receive+0x5e>
		// If RX buffer is empty, don't read, just loop
		while (SPI_GetFlagStatus(pSPIx, SPI_SR_RXNE_FLG) == FLAG_RESET);
 8000b60:	bf00      	nop
 8000b62:	2101      	movs	r1, #1
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f7ff ffaa 	bl	8000abe <SPI_GetFlagStatus>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0f8      	beq.n	8000b62 <SPI_Receive+0x10>

		// Read data
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00e      	beq.n	8000b9a <SPI_Receive+0x48>
			//16 bit
			*(uint16_t*)pRxBuffer = pSPIx->DR;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	801a      	strh	r2, [r3, #0]
			(uint16_t*)pRxBuffer++;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
			Len--;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	607b      	str	r3, [r7, #4]
			Len--;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	e00a      	b.n	8000bb0 <SPI_Receive+0x5e>
		} else {
			//8 bit
			*pRxBuffer = pSPIx->DR;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	701a      	strb	r2, [r3, #0]
			Len--;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3301      	adds	r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
	while (Len > 0) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1d4      	bne.n	8000b60 <SPI_Receive+0xe>
		}

	}
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <__libc_init_array>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	4d0d      	ldr	r5, [pc, #52]	; (8000bf8 <__libc_init_array+0x38>)
 8000bc4:	4c0d      	ldr	r4, [pc, #52]	; (8000bfc <__libc_init_array+0x3c>)
 8000bc6:	1b64      	subs	r4, r4, r5
 8000bc8:	10a4      	asrs	r4, r4, #2
 8000bca:	2600      	movs	r6, #0
 8000bcc:	42a6      	cmp	r6, r4
 8000bce:	d109      	bne.n	8000be4 <__libc_init_array+0x24>
 8000bd0:	4d0b      	ldr	r5, [pc, #44]	; (8000c00 <__libc_init_array+0x40>)
 8000bd2:	4c0c      	ldr	r4, [pc, #48]	; (8000c04 <__libc_init_array+0x44>)
 8000bd4:	f000 f818 	bl	8000c08 <_init>
 8000bd8:	1b64      	subs	r4, r4, r5
 8000bda:	10a4      	asrs	r4, r4, #2
 8000bdc:	2600      	movs	r6, #0
 8000bde:	42a6      	cmp	r6, r4
 8000be0:	d105      	bne.n	8000bee <__libc_init_array+0x2e>
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000be8:	4798      	blx	r3
 8000bea:	3601      	adds	r6, #1
 8000bec:	e7ee      	b.n	8000bcc <__libc_init_array+0xc>
 8000bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bf2:	4798      	blx	r3
 8000bf4:	3601      	adds	r6, #1
 8000bf6:	e7f2      	b.n	8000bde <__libc_init_array+0x1e>
 8000bf8:	08000c20 	.word	0x08000c20
 8000bfc:	08000c20 	.word	0x08000c20
 8000c00:	08000c20 	.word	0x08000c20
 8000c04:	08000c24 	.word	0x08000c24

08000c08 <_init>:
 8000c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0a:	bf00      	nop
 8000c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c0e:	bc08      	pop	{r3}
 8000c10:	469e      	mov	lr, r3
 8000c12:	4770      	bx	lr

08000c14 <_fini>:
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	bf00      	nop
 8000c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1a:	bc08      	pop	{r3}
 8000c1c:	469e      	mov	lr, r3
 8000c1e:	4770      	bx	lr
